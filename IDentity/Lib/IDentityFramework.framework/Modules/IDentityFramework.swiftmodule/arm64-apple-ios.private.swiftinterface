// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios15.6 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature OpaqueTypeErasure -enable-bare-slash-regex -module-name IDentityFramework
import CommonCrypto
import CryptoKit
import CryptoTokenKit
import Foundation
@_exported import IDentityFramework
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Foundation.Data {
  public mutating func xor(key: Foundation.Data)
}
public protocol PassportControllerDelegate {
  func onProgressReadPassportData(progress: Swift.Float)
  func onCompleteReadPassportData(data: IDentityFramework.PassportModel)
  func onBeginCardSession(isSuccess: Swift.Bool)
  func onErrorOccur(errorMessage: Swift.String, isError: Swift.Bool)
}
public class PassportController {
  public var data: IDentityFramework.PassportModel?
  public var delegate: (any IDentityFramework.PassportControllerDelegate)?
  public init(rmngr: IDentityFramework.ReaderController, isSmartCardInitialized: Swift.Bool)
  public func ReadRFIDData(mrz: Swift.String, dg1: Swift.Bool, dg2: Swift.Bool, dg11: Swift.Bool)
  @objc deinit
}
public protocol ThaiIdControllerDelegate {
  func onProgressReadThaiIdData(progress: Swift.Float)
  func onCompleteReadThaiIdData(data: IDentityFramework.ThaiIdModel)
  func onBeginCardSession(isSuccess: Swift.Bool)
  func onErrorOccur(errorMessage: Swift.String, isError: Swift.Bool)
}
public class ThaiIdController {
  public var data: IDentityFramework.ThaiIdModel?
  public var delegate: (any IDentityFramework.ThaiIdControllerDelegate)?
  public init(rmngr: IDentityFramework.ReaderController, isSmartCardInitialized: Swift.Bool)
  public func readThaiID(isImageRequire: Swift.Bool)
  @objc deinit
}
public struct ThaiIdModel {
  public var chipId: Swift.String?
  public var laserId: Swift.String?
  public var cardType: Swift.String?
  public var cId: Swift.String?
  public var thaiFullName: Swift.String?
  public var thaiTitleName: Swift.String?
  public var thaiFirstName: Swift.String?
  public var thaiMiddleName: Swift.String?
  public var thaiLastName: Swift.String?
  public var engTitleName: Swift.String?
  public var engFullName: Swift.String?
  public var engFirstName: Swift.String?
  public var engMiddleName: Swift.String?
  public var engLastName: Swift.String?
  public var dateOfBirth: Swift.String?
  public var gender: Swift.String?
  public var bp1no: Swift.String?
  public var cardIssuer: Swift.String?
  public var issuerCode: Swift.String?
  public var issueDate: Swift.String?
  public var expireDate: Swift.String?
  public var base64Img: Swift.String?
  public var address: Swift.String?
  public var moo: Swift.String?
  public var trok: Swift.String?
  public var soi: Swift.String?
  public var thanon: Swift.String?
  public var tumbol: Swift.String?
  public var amphur: Swift.String?
  public var provice: Swift.String?
  public var photoRefNumber: Swift.String?
}
public protocol ReaderControllerDelegate {
  func onErrorOccur(errorMessage: Swift.String, isError: Swift.Bool)
}
public class ReaderController {
  public var delegate: (any IDentityFramework.ReaderControllerDelegate)?
  public init(isPassport: Swift.Bool)
  public func initSmartCard() async -> Swift.Bool
  public func getReader() -> Swift.String
  public func beginCardSession() async -> Swift.Bool
  public func transmitCardAPDU(card: CryptoTokenKit.TKSmartCard, apdu: Swift.String) async -> Swift.String
  public func endCardSession()
  @objc deinit
}
public struct PassportModel {
  public var documentCode: Swift.String?
  public var issueState: Swift.String?
  public var holderFullName: Swift.String?
  public var holderFirstName: Swift.String?
  public var holderMiddleName: Swift.String?
  public var holderLastName: Swift.String?
  public var documentNumber: Swift.String?
  public var docNumCheckDigit: Swift.String?
  public var nationality: Swift.String?
  public var dateOfBirth: Swift.String?
  public var dateOfBirthCheckDigit: Swift.String?
  public var sex: Swift.String?
  public var dateOfExpiry: Swift.String?
  public var dateOfExpiryCheckDigit: Swift.String?
  public var optionalData: Swift.String?
  public var compositeCheckDigit: Swift.String?
  public var faceImage: Swift.String?
  public var personalNumber: Swift.String?
  public var fullDateOfBirth: Swift.String?
  public var placeOfBirth: Swift.String?
  public var permanentAddress: Swift.String?
  public var telephone: Swift.String?
  public var profession: Swift.String?
  public var title: Swift.String?
  public var personelSummary: Swift.String?
  public var DG1: Swift.String?
  public var DG11: Swift.String?
  public var DG12: Swift.String?
}
